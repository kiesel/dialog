/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.dialog.unittest;

import unittest.TestCase;
import de.thekid.dialog.Album;
import de.thekid.dialog.AlbumImage;
import de.thekid.dialog.AlbumChapter;
import util.Date;

/**
 * Tests the album class
 *
 * @see      xp://de.thekid.dialog.Album
 */
public class AlbumTest extends TestCase {
  protected Album $fixture;

  /**
   * Sets up this test case
   *
   */
  public void setUp() {
    $this.fixture= new Album();
  }

  /**
   * Tests name accessors
   *
   */
  [@test]
  public void nameAccessors() {
    $this.fixture.setName('name');
    $this.assertEquals('name', $this.fixture.getName());
  }

  /**
   * Tests title accessors
   *
   */
  [@test]
  public void titleAccessors() {
    $this.fixture.setTitle('Title');
    $this.assertEquals('Title', $this.fixture.getTitle());
  }

  /**
   * Tests description accessors
   *
   */
  [@test]
  public void descriptionAccessors() {
    $this.fixture.setDescription('Description');
    $this.assertEquals('Description', $this.fixture.getDescription());
  }

  /**
   * Tests createdAt accessors
   *
   */
  [@test]
  public void createdAtAccessors() {
    $date= Date::now();
    $this.fixture.setCreatedAt($date);
    $this.assertEquals($date, $this.fixture.getCreatedAt());
  }

  /**
   * Tests getDate() method
   *
   */
  [@test]
  public void getDate() {
    $date= Date::now();
    $this.fixture.setCreatedAt($date);
    $this.assertEquals($date, $this.fixture.getDate());
  }

  /**
   * Tests addHighlight() method
   *
   */
  [@test]
  public void addingAHighlightReturnsIt() {
    $img= new AlbumImage('highlight.1');
    $this.assertEquals($img, $this.fixture.addHighlight($img));
  }

  /**
   * Tests withHighlight() method
   *
   */
  [@test]
  public void withHighlightReturnsAlbum() {
    $this.assertEquals($this.fixture, $this.fixture.withHighlight(new AlbumImage('highlight.1')));
  }

  /**
   * Tests numHighlights() method
   *
   */
  [@test]
  public void noHighlightsInitially() {
    $this.assertEquals(0, $this.fixture.numHighlights());
  }

  /**
   * Tests numHighlights() and addHighlight() methods
   *
   */
  [@test]
  public void addingAHighlight() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.assertEquals(1, $this.fixture.numHighlights());
  }

  /**
   * Tests numHighlights() and addHighlight() methods
   *
   */
  [@test]
  public void addingHighlights() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.fixture.addHighlight(new AlbumImage('highlight.2'));
    $this.assertEquals(2, $this.fixture.numHighlights());
  }

  /**
   * Tests highlightAt() method
   *
   */
  [@test]
  public void noHighlightsInitiallyAtZero() {
    $this.assertNull($this.fixture.highlightAt(0));
  }

  /**
   * Tests highlightAt() method
   *
   */
  [@test]
  public void highlightAtZero() {
    $img= $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.assertEquals($img, $this.fixture.highlightAt(0));
  }

  /**
   * Tests highlightAt() method
   *
   */
  [@test]
  public void highlightAtOne() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.assertNull($this.fixture.highlightAt(1));
  }

  /**
   * Tests highlightAt() method
   *
   */
  [@test]
  public void highlightAtNegativeOne() {
    $this.assertNull($this.fixture.highlightAt(-1));
  }

  /**
   * Tests addChapter() method
   *
   */
  [@test]
  public void addingAChapterReturnsIt() {
    $chapter= new AlbumChapter('2009-09-09 9');
    $this.assertEquals($chapter, $this.fixture.addChapter($chapter));
  }

  /**
   * Tests withChapter() method
   *
   */
  [@test]
  public void withChapterReturnsAlbum() {
    $this.assertEquals($this.fixture, $this.fixture.withChapter(new AlbumChapter('2009-09-09 9')));
  }

  /**
   * Tests numChapters() method
   *
   */
  [@test]
  public void noChaptersInitially() {
    $this.assertEquals(0, $this.fixture.numChapters());
  }

  /**
   * Tests numChapters() and addChapter() methods
   *
   */
  [@test]
  public void addingAChapter() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1'));
    $this.assertEquals(1, $this.fixture.numChapters());
  }

  /**
   * Tests numChapters() and addChapter() methods
   *
   */
  [@test]
  public void addingChapters() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1'));
    $this.fixture.addChapter(new AlbumChapter('chapter.2'));
    $this.assertEquals(2, $this.fixture.numChapters());
  }

  /**
   * Tests chapterAt() method
   *
   */
  [@test]
  public void noChaptersInitiallyAtZero() {
    $this.assertNull($this.fixture.chapterAt(0));
  }

  /**
   * Tests chapterAt() method
   *
   */
  [@test]
  public void chapterAtZero() {
    $chapter= $this.fixture.addChapter(new AlbumChapter('chapter.1'));
    $this.assertEquals($chapter, $this.fixture.chapterAt(0));
  }

  /**
   * Tests chapterAt() method
   *
   */
  [@test]
  public void chapterAtOne() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1'));
    $this.assertNull($this.fixture.chapterAt(1));
  }

  /**
   * Tests chapterAt() method
   *
   */
  [@test]
  public void chapterAtNegativeOne() {
    $this.assertNull($this.fixture.chapterAt(-1));
  }

  /**
   * Tests numImages() method
   *
   */
  [@test]
  public void initiallyNoImages() {
    $this.assertEquals(0, $this.fixture.numImages());
  }

  /**
   * Tests numImages() method
   *
   */
  [@test]
  public void numImagesExcludesHighlights() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.assertEquals(0, $this.fixture.numImages());
  }

  /**
   * Tests numImages() method
   *
   */
  [@test]
  public void numImagesWithOneChapter() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1')
      .withImage(new AlbumImage('chapter.1.image.1'))
    );
    $this.assertEquals(1, $this.fixture.numImages());
  }

  /**
   * Tests numImages() method
   *
   */
  [@test]
  public void numImagesWithMultipleChapters() {
  
    // Chapter 1 with 1 image
    $this.fixture.addChapter(new AlbumChapter('chapter.1')
      .withImage(new AlbumImage('chapter.1.image.1'))
    );
    
    // Chapter 2 with 2 images
    $this.fixture.addChapter(new AlbumChapter('chapter.2')
      .withImage(new AlbumImage('chapter.2.image.1'))
      .withImage(new AlbumImage('chapter.2.image.2'))
    );
    
    // Chapter 3 without images
    $this.fixture.addChapter(new AlbumChapter('chapter.3'));
    
    $this.assertEquals(3, $this.fixture.numImages());
  }

  /**
   * Tests imageUrn() method
   *
   */
  [@test]
  public void urnOfFirstHighlight() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.assertEquals(
      ['type' : 'h', 'chapter' : 0, 'id' : 0], 
      $this.fixture.imageUrn('highlight.1')
    );
  }

  /**
   * Tests imageUrn() method
   *
   */
  [@test]
  public void urnOfSecondHighlight() {
    $this.fixture.addHighlight(new AlbumImage('highlight.1'));
    $this.fixture.addHighlight(new AlbumImage('highlight.2'));
    $this.assertEquals(
      ['type' : 'h', 'chapter' : 0, 'id' : 1], 
      $this.fixture.imageUrn('highlight.2')
    );
  }

  /**
   * Tests imageUrn() method
   *
   */
  [@test]
  public void urnOfImageInFirstChapter() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1')
      .withImage(new AlbumImage('chapter.1.image.1'))
    );
    $this.assertEquals(
      ['type' : 'i', 'chapter' : 0, 'id' : 0], 
      $this.fixture.imageUrn('chapter.1.image.1')
    );
  }

  /**
   * Tests imageUrn() method
   *
   */
  [@test]
  public void urnOfImageInSecondChapter() {
    $this.fixture.addChapter(new AlbumChapter('chapter.1')
      .withImage(new AlbumImage('chapter.1.image.1'))
    );
    $this.fixture.addChapter(new AlbumChapter('chapter.2')
      .withImage(new AlbumImage('chapter.2.image.1'))
      .withImage(new AlbumImage('chapter.2.image.2'))
    );
    $this.assertEquals(
      ['type' : 'i', 'chapter' : 1, 'id' : 1], 
      $this.fixture.imageUrn('chapter.2.image.2')
    );
  }
}
