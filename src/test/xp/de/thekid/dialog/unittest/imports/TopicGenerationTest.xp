package de.thekid.dialog.unittest.imports;

import de.thekid.dialog.cmd.ImportCommand;
import img.util.ExifData;
import img.util.IptcData;
import util.Date;
import de.thekid.dialog.Album;
import de.thekid.dialog.Topic;
import de.thekid.dialog.AlbumImage;
import de.thekid.dialog.AlbumChapter;

import native standard.implode;
import native standard.array_keys;

public class TopicGenerationTest extends ImportTest {

  /**
   * Creates a new import command
   */
  private ImportCommand newImporter(Album $album) {
    return new ImportCommand($album) {
      protected Album $album;
      
      public __construct(Album $album) {
        $this.album= $album;
      }
    
      protected void doImport() {
        foreach ($chapter in $this.album.chapters) {
          foreach ($image in $chapter.images) {
            $this.processMetaData($image, $this.album);
          }
        }
      }
      
      public void run() {
        $this.doImport();
      }
      
      public Topic getTopic(string $name) {
        if (!isset($this.topics[$name])) {
          throw new util.NoSuchElementException(
            'No topic named "' ~ $name ~ '", have ' ~ 
            '[' ~ implode(', ', array_keys($this.topics)) ~ ']'
          );
        }
        return $this.topics[$name];
      }
    };
  }

  [@test]
  public void topicsAreAutomaticallyGenerated() {
    $date= Date::now();

    $cmd= $this.run($this.newImporter(new Album()
      .withName('album.1')
      .withCreatedAt($date)
      .withChapter(new AlbumChapter('chapter.1')
        .withImage(new AlbumImage('image.1')
          .withExifData(new ExifData().withDateTime($date))
          .withIptcData(new IptcData().withKeywords(['Colors: Green']))
        )
      )
    ));
    
    // Verify the topic itself
    $topic= $cmd.getTopic('colors__green');
    $this.assertInstanceOf(Topic::class, $topic);
    $this.assertEquals('colors__green', $topic.getName());
    $this.assertEquals('Colors: Green', $topic.getTitle());
    $this.assertEquals($date, $topic.getCreatedAt());
    
    // Verify the image is in the topic and originates from the album
    $this.assertInstanceOf(AlbumImage::class, $topic.featuredImages()['album.1']);
    $this.assertEquals('image.1', $topic.featuredImages()['album.1'].getName());
    $this.assertEquals('album.1', $topic.origins()[0]);
  }
}
