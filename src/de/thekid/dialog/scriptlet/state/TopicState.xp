/* This class is part of the XP framework
 *
 * $Id$
 */

package de.thekid.dialog.scriptlet.state;

import de.thekid.dialog.scriptlet.AbstractDialogState;
import xml.Node;
import xml.PCData;

import native standard.krsort;

/**
 * Handles /xml/topic
 *
 */
public class TopicState extends AbstractDialogState {
  protected var $nodeHandlers = [:];

  /**
   * Constructor
   *
   */
  public __construct() {
    for ($c= $this.getClass(), $m= $c.getMethods(), $i= 0, $s= $m.length; $i < $s; $i++) {
      $m[$i].hasAnnotation('handles') && (
        $this.nodeHandlers[$m[$i].getAnnotation('handles')]= $m[$i]
      );
    }
  }

  /**
   * Handler for albums
   *
   * @param   de.thekid.dialog.Album album
   * @return  xml.Node node
   */
  [@handles('de.thekid.dialog.Album')]
  public Node albumNode(de.thekid.dialog.Album? $album) {
    $child= new Node('entry', null, [
      'name'          : $album.getName(),
      'title'         : $album.getTitle(),
      'num_images'    : $album.numImages(),
      'num_chapters'  : $album.numChapters()
    ]);
    $child.addChild(Node::fromObject($album.createdAt, 'created'));
    return $child;
  }

  /**
   * Handler for updates
   *
   * @param   de.thekid.dialog.Update update
   * @return  xml.Node node
   */
  [@handles('de.thekid.dialog.Update')]
  public Node updateNode(de.thekid.dialog.Update? $update) {
    $child= new Node('entry', null, [
      'album'         : $update.getAlbumName(),
      'title'         : $update.getTitle()
    ]);
    $child.addChild(Node::fromObject($update.date, 'created'));
    return $child;
  }

  /**
   * Handler for single shots
   *
   * @param   de.thekid.dialog.SingleShot shot
   * @return  xml.Node node
   */
  [@handles('de.thekid.dialog.SingleShot')]
  public Node shotNode(de.thekid.dialog.SingleShot? $shot) {
    $child= new Node('entry', null, [
      'name'      : $shot.getName(),
      'title'     : $shot.getTitle()
    ]);
    $child.addChild(Node::fromObject($shot.date, 'created'));
    return $child;
  }

  /**
   * Handler for entry collections
   *
   * @param   de.thekid.dialog.EntryCollection collection
   * @return  xml.Node node
   */
  [@handles('de.thekid.dialog.EntryCollection')]
  public Node collectionNode(de.thekid.dialog.EntryCollection? $collection) {
    $node= new Node('entry', null, [
      'name'          : $collection.getName(),
      'title'         : $collection.getTitle(),
      'num_entries'   : $collection.numEntries()
    ]);
    $node.addChild(Node::fromObject($collection.createdAt, 'created'));
    return $node;
  }

  /**
   * Process this state.
   *
   */
  public void process(scriptlet.xml.workflow.WorkflowScriptletRequest? $request, scriptlet.xml.XMLScriptletResponse? $response, scriptlet.xml.workflow.Context? $context) {
    $name= $request.getQueryString();
    $topic= $this.getEntryFor('topics/' ~ $name);

    $t= $response.addFormResult(new Node('topic', null, [
      'name'       : $topic.getName(),
      'title'      : $topic.getTitle()
    ]));
    $t.addChild(Node::fromObject($topic.getCreatedAt(), 'created'));

    // Add origins
    $origins= [:];
    foreach ($name in $topic.origins()) {
      $entry= $this.getEntryFor($name);
      if (!isset($this.nodeHandlers[$entry.getClassName()])) {
        throw new FormatException('Index contains unknown element "' ~ $entry.getClassName() ~ '"');
      }

      if ($child= $this.nodeHandlers[$entry.getClassName()].invoke($this, [$entry])) {
        $y= $entry.getDate().toString('Y');
        if (!isset($origins[$y])) {
          $origins[$y]= new Node('year', null, ['num' : $y]);
        }
        $origins[$y].addChild($child).setAttribute('type', $entry.getClassName());

        foreach ($image in $topic.imagesFrom($name)) {
          $i= $origins[$y].addChild(new Node('image', null, [
            'name'          : $image.getName(),
            'origin-name'   : $name,
            'origin-class'  : $entry.getClassName()
          ]));

          foreach ($key, $value in $entry.imageUrn($image.getName())) {
            $i.setAttribute('origin-' ~ $key, $value);
          }
        }
      }
    }
    krsort($origins);
    foreach ($byYear in $origins) {
      $t.addChild($byYear);
    }
  }
}
