package de.thekid.dialog;

import util.Date;

import native standard.sprintf;
import native standard.array_keys;
import native standard.array_reverse;

/**
 * Represents a topic.
 *
 * @test     xp://de.thekid.dialog.unittest.TopicTest
 */
public class Topic implements IEntry {
  public string $name            = '';
  public string $title           = '';
  public string $description     = '';
  public Date $createdAt         = null;
  public [:AlbumImage[]] $images = [:];

  /**
   * Constructor
   */
  public __construct($this.name= null) { }

  /**
   * Name accessors
   */
  public void setName($this.name) { }
  public self withName($this.name) -> $this;
  public string getName() -> $this.name;

  /**
   * Title accessors
   */
  public void setTitle($this.title) { }
  public self withTitle($this.title) -> $this;
  public string getTitle() -> $this.title;

  /**
   * Description accessors
   */
  public void setDescription($this.description) { }
  public self withDescription($this.description) -> $this;
  public string getDescription() -> $this.description;

  /**
   * CreatedAt accessors
   */
  public void setCreatedAt($this.createdAt) { }
  public self withCreatedAt($this.createdAt) -> $this;
  public Date getCreatedAt() -> $this.createdAt;

  /**
   * Get date
   *
   * @see     xp://de.thekid.dialog.IEntry
   */
  public Date getDate() -> $this.createdAt;

  /**
   * Add an element to images
   *
   * @param   image
   * @param   origin origin album
   */
  public void addImage(AlbumImage $image, string $origin) {
    if (isset($this.images[$origin])) {    // Check for duplicates
      foreach ($existing in $this.images[$origin]) {
        if ($existing.getName() === $image.getName()) return;
      }
    } else {
      $this.images[$origin]= [];
    }
    $this.images[$origin][]= $image;
  }

  /**
   * Get number of images.
   *
   */
  public int numImages() {
    $n= 0;
    foreach ($origin in $this.origins()) {
      $n+= ($this.images[$origin] as AlbumImage[]?).length;
    }
    return $n;
  }

  /**
   * Get images from a certain album
   *
   */
  public AlbumImage[] imagesFrom(string $origin) {
    if (!isset($this.images[$origin])) return [];
    return $this.images[$origin];
  }

  /**
   * Get featured images.
   *
   * @param   max If passed, a maximum number of featured images is returned
   */
  public [:AlbumImage] featuredImages(int $max= -1) {
    $r= [:];
    foreach ($i, $origin in array_reverse($this.origins())) {
      $r[$origin]= $this.images[$origin][0];
      if (-1 !== $max && $i >= $max- 1) break;
    }
    return $r;
  }

  /**
   * Get origins.
   *
   */
  public string[] origins() {
    return array_keys($this.images);
  }

  /**
   * Retrieve a string representation
   *
   */
  public string toString() {
    return sprintf(
      "%s(%s)@{\n" ~
      "  [title        ] %s\n" ~
      "  [description  ] %s\n" ~ 
      "  [createdAt    ] %s\n" ~ 
      "  [images       ] {\n%s  }\n" ~
      "}",
      nameof($this),
      $this.name,
      $this.title,
      $this.description,
      xp::stringOf($this.createdAt),
      xp::stringOf($this.images)
    );
  }
} 
