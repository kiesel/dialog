/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.dialog.scriptlet.state;

import scriptlet.xml.XMLScriptletRequest;
import scriptlet.xml.XMLScriptletResponse;
import scriptlet.xml.workflow.Context;
import xml.Node;

import de.thekid.dialog.Album;
import de.thekid.dialog.EntryCollection;

import native standard.sscanf;
import native standard.substr;
import native standard.strpos;

/**
 * Handles /xml/image/view
 *
 */
public class ViewImageState extends de.thekid.dialog.scriptlet.AbstractDialogState {

  /**
   * Process this state.
   *
   */
  public void process(XMLScriptletRequest? $request, XMLScriptletResponse? $response, Context? $context) {
    $name= $request.getURL().getValue('album');
    $chapter= $request.getURL().getValue('chapter') as int;
    $type= $request.getURL().getValue('type');
    $id= $request.getURL().getValue('index') as int;

    with ($album= $this._getEntryFor($name, Album::class) as Album?) {

      // Add formresult information about the album
      $child= $response.addFormResult(new Node('album', null, [
        name  : $album.getName(),
        title : $album.getTitle(),
        page  : $this.getDisplayPageFor($name)
      ]));

      // Add formresult information depending on type of selected item
      //
      // Add an attribute indicating the next item (if existant):
      // - For highlights, the navigation goes from the first one of
      //   them to the last, wrapping to the first image of the first
      //   chapter if existant, ending there otherwise.
      // - For images contained in chapters, wrap around to the first
      //   image of the next chapter (if existant)
      //
      // Add an attribute indicating the previous item (if existant)
      // - For highlights, the navigation goes from the first one of
      //   them to the last, ending there.
      // - For images contained in chapters, wrap around to the last
      //   image of the previous chapter (if existant)
      $next= $prev= null;
      switch ($type) {
        case 'h':
          $selected= $response.addFormResult(Node::fromObject($album.highlightAt($id), 'selected'));
          if ($id < $album.numHighlights() - 1) {
            $next= [ type : 'h', chapter : 0, number : $id + 1 ];
          } else if (($album.numChapters() > 0) && ($album.chapterAt(0).numImages() > 0)) {
            $next= [ type : 'i', chapter : 0, number : 0 ];
          }
          if ($id > 0) {
            $prev= [ type : 'h', chapter : 0, number : $id - 1 ];
          }
          break;

        case 'i':
          $selected= $response.addFormResult(Node::fromObject($album.chapterAt($chapter).imageAt($id), 'selected'));
          if ($id < $album.chapterAt($chapter).numImages() - 1) {
            $next= [ type : 'i', chapter : $chapter, number : $id + 1 ];
          } else if ($chapter < $album.numChapters() - 1) {
            $next= [ type : 'i', chapter : $chapter + 1, number : 0 ];
          }
          if ($id > 0) {
            $prev= [ type : 'i', chapter : $chapter, number : $id - 1 ];
          } else if ($chapter > 0) {
            $prev= [ type : 'i', chapter : $chapter - 1, number : $album.chapterAt($chapter- 1).numImages()- 1 ];
          } else {
            $prev= [ type : 'h', chapter : 0, number : $album.numHighlights()- 1 ];
          }
          break;
      }

      $selected.setAttribute('type', $type);
      $selected.setAttribute('chapter', $chapter);
      $next && $selected.addChild(Node::fromArray($next, 'next'));
      $prev && $selected.addChild(Node::fromArray($prev, 'prev'));

      // Check if album is inside a collection
      if (false === ($p= strpos($name, '/'))) return; 

      $parent= $this._getEntryFor(substr($name, 0, $p), EntryCollection::class) as EntryCollection?;
      $child.setAttribute('page', $this.getDisplayPageFor($parent.getName()));
      $child.addChild(new Node('collection', null, [
        name  : $parent.getName(),
        title : $parent.getTitle()
      ]));
    }
  }
}
