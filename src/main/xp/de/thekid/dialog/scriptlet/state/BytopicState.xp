package de.thekid.dialog.scriptlet.state;

import scriptlet.xml.XMLScriptletRequest;
import scriptlet.xml.XMLScriptletResponse;
import scriptlet.xml.workflow.Context;
import xml.Node;
import xml.PCData;

import de.thekid.dialog.IEntry;
import de.thekid.dialog.Update;
import de.thekid.dialog.SingleShot;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.Topic;
import de.thekid.dialog.scriptlet.NodeHandler;
import de.thekid.dialog.scriptlet.AlbumNodeHandler;
import de.thekid.dialog.scriptlet.UpdateNodeHandler;
import de.thekid.dialog.scriptlet.SingleShotNodeHandler;
import de.thekid.dialog.scriptlet.ImageStripNodeHandler;
import de.thekid.dialog.scriptlet.EntryCollectionNodeHandler;

import native standard.sscanf;
import native standard.krsort;
import native standard.sizeof;

/**
 * Handles /xml/bytopic
 *
 */
public class BytopicState extends de.thekid.dialog.scriptlet.AbstractDialogState {
  protected static [:NodeHandler] $nodeHandlers = [:];

  const int MAX_FEATURED = 10;

  static {
    self::$nodeHandlers['de.thekid.dialog.Album']= new AlbumNodeHandler();
    self::$nodeHandlers['de.thekid.dialog.Update']= new UpdateNodeHandler() {
      protected void addDetails(Node $child, Update? $update, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(Node::fromObject($update.getDate(), 'created'));       // FIXME: Standardize!
      }
    };
    self::$nodeHandlers['de.thekid.dialog.SingleShot']= new SingleShotNodeHandler() {
      protected void addDetails(Node $child, SingleShot? $shot, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(Node::fromObject($shot.getDate(), 'created'));         // FIXME: Standardize!
      }
    };
    self::$nodeHandlers['de.thekid.dialog.ImageStrip']= new ImageStripNodeHandler() {
      protected void addDetails(Node $child, ImageStrip? $imageStrip, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(Node::fromObject($imageStrip.getDate(), 'created'));   // FIXME: Standardize!
      }
    };
    self::$nodeHandlers['de.thekid.dialog.EntryCollection']= new EntryCollectionNodeHandler();
  }

  /**
   * Process this state.
   *
   */
  public void process(XMLScriptletRequest? $request, XMLScriptletResponse? $response, Context? $context) {
    $page= $request.getURL().getValue('page');
    $index= $this.getIndexTopics($page);

    // Add paging information
    $response.addFormResult(new Node('pager', null, [
      offset  : $page,
      total   : $index['total'],
      perpage : $index['perpage']
    ]));

    $node= $response.addFormResult(new Node('topics'));
    foreach ($name in $index['entries'] as string[]?) {
      $topic= $this._getEntryFor($name, Topic::class) as Topic?;

      $t= $node.addChild(new Node('topic', null, [ name : $topic.getName(), title : $topic.getTitle() ]));
      $t.addChild(Node::fromObject($topic.getCreatedAt(), 'created'));
      
      // Add 10 most recent featured images
      $featured= $topic.featuredImages(self::MAX_FEATURED);
      $images= $t.addChild(new Node('featured'));
      $images.setAttribute('total', $topic.numImages());
      $entries= new [:IEntry] {:};
      foreach ($origin, $image in $featured) {
        $i= $images.addChild(Node::fromObject($image, 'image'));
        $i.setAttribute('name', $image.getName());
        $i.setAttribute('origin-name', $origin);
        if (!isset($entries[$origin])) {
          $entries[$origin]= $this.getEntryFor($origin);
        }
        $i.setAttribute('origin-class', $entries[$origin].getClassName());
        foreach ($key, $value in $entries[$origin].imageUrn($image.getName()) as [:string]?) {
          $i.setAttribute('origin-' ~ $key, $value);
        }
      }
    }
  }
}
