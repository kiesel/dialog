package de.thekid.dialog.scriptlet.state;

import scriptlet.xml.XMLScriptletRequest;
import scriptlet.xml.XMLScriptletResponse;
import scriptlet.xml.workflow.Context;
import xml.Node;
import xml.PCData;

import de.thekid.dialog.IEntry;
import de.thekid.dialog.Album;
import de.thekid.dialog.Update;
import de.thekid.dialog.SingleShot;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.EntryCollection;
import de.thekid.dialog.scriptlet.NodeHandler;
import de.thekid.dialog.scriptlet.AlbumNodeHandler;
import de.thekid.dialog.scriptlet.UpdateNodeHandler;
import de.thekid.dialog.scriptlet.SingleShotNodeHandler;
import de.thekid.dialog.scriptlet.ImageStripNodeHandler;
import de.thekid.dialog.scriptlet.EntryCollectionNodeHandler;

import native standard.sscanf;

/**
 * Handles /xml/static
 *
 */
public class StaticState extends de.thekid.dialog.scriptlet.AbstractDialogState {
  protected static [:NodeHandler] $nodeHandlers = [:];
  
  static {
    self::$nodeHandlers['de.thekid.dialog.Album']= new AlbumNodeHandler() {
      protected void addDetails(Node $child, Album? $album, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($album.getDescription())));
        $child.addChild(Node::fromArray($album.highlights, 'highlights'));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.Update']= new UpdateNodeHandler() {
      protected void addDetails(Node $child, Update? $update, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($update.getDescription())));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.SingleShot']= new SingleShotNodeHandler() {
      protected void addDetails(Node $child, SingleShot? $shot, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($shot.getDescription())));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.ImageStrip']= new ImageStripNodeHandler() {
      protected void addDetails(Node $child, ImageStrip? $imageStrip, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($imageStrip.getDescription())));
        $child.addChild(Node::fromArray($imageStrip.images, 'images'));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.EntryCollection']= new EntryCollectionNodeHandler() {
      protected void addDetails(Node $child, EntryCollection? $collection, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($collection.getDescription())));
        for ($i= 0; $i < $collection.numEntries(); $i++) {
          $entry= $collection.entryAt($i);
          $type= typeof($entry).getName();
          if (!isset($nodeHandlers[$type])) {
            throw new FormatException('Collection index contains unknown element "' ~ $type ~ '"');
          }

          $node= $child.addChild($nodeHandlers[$type].nodeFor($entry, $nodeHandlers));
          $node.setAttribute('type', $type);
        }
      }
    };
  }

  /**
   * Process this state.
   *
   */
  public void process(XMLScriptletRequest? $request, XMLScriptletResponse? $response, Context? $context) {
    $page= $request.getURL().getValue('index') as int;
    $index= $this.getIndexPage($page);
    
    // Add paging information
    $response.addFormResult(new Node('pager', null, [
      offset  : $page,
      total   : $index['total'],
      perpage : $index['perpage']
    ]));
    
    // Add entries from index
    $node= $response.addFormResult(new Node('entries'));
    foreach ($name in $index['entries'] as string[]?) {
      $entry= $this.getEntryFor($name);
      $type= typeof($entry).getName();
      if (!isset(self::$nodeHandlers[$type])) {
        throw new FormatException('Index contains unknown element "' ~ $type ~ '"');
      }

      $child= $node.addChild(self::$nodeHandlers[$type].nodeFor($entry, self::$nodeHandlers));
      $child.setAttribute('type', $type);
    }
  }
}
