/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.dialog.scriptlet.state;

import scriptlet.xml.XMLScriptletRequest;
import scriptlet.xml.XMLScriptletResponse;
import scriptlet.xml.workflow.Context;
import xml.Node;
import xml.PCData;

import de.thekid.dialog.IEntry;
import de.thekid.dialog.Album;
import de.thekid.dialog.Update;
import de.thekid.dialog.SingleShot;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.EntryCollection;
import de.thekid.dialog.scriptlet.NodeHandler;
import de.thekid.dialog.scriptlet.AlbumNodeHandler;
import de.thekid.dialog.scriptlet.UpdateNodeHandler;
import de.thekid.dialog.scriptlet.SingleShotNodeHandler;
import de.thekid.dialog.scriptlet.ImageStripNodeHandler;
import de.thekid.dialog.scriptlet.EntryCollectionNodeHandler;

import native standard.sscanf;
import native standard.key;
import native standard.min;
import native standard.max;

/**
 * Handles /xml/bydate
 *
 */
public class BydateState extends de.thekid.dialog.scriptlet.AbstractDialogState {
  protected static [:NodeHandler] $nodeHandlers = [:];
  
  static {
    self::$nodeHandlers['de.thekid.dialog.Album']= new AlbumNodeHandler() {
      protected void addDetails(Node $child, Album? $album, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($album.getDescription())));
        $child.addChild(new Node('highlight', $album.highlightAt(0).getName()));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.Update']= new UpdateNodeHandler() {
      protected void addDetails(Node $child, Update? $update, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($update.getDescription())));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.SingleShot']= new SingleShotNodeHandler() {
      protected void addDetails(Node $child, SingleShot? $shot, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($shot.getDescription())));
        $child.addChild(new Node('highlight', $shot.getFileName()));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.ImageStrip']= new ImageStripNodeHandler() {
      protected void addDetails(Node $child, ImageStrip? $imageStrip, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($imageStrip.getDescription())));
        $child.addChild(new Node('highlight', $imageStrip.imageAt(0).getName()));
        $child.addChild(Node::fromObject($imageStrip.createdAt, 'created'));
      }
    };
    self::$nodeHandlers['de.thekid.dialog.EntryCollection']= new EntryCollectionNodeHandler() {
      protected void addDetails(Node $child, EntryCollection? $collection, [:NodeHandler]? $nodeHandlers) {
        $child.addChild(new Node('description', new PCData($collection.getDescription())));
        with ($first= $collection.entryAt(0)) {
          $child.setAttribute('first', $first.getName());
          $child.addChild(new Node('highlight', $first.highlightAt(0).getName()));
        }
      }
    };
  }

  /**
   * Process this state.
   *
   */
  public void process(XMLScriptletRequest? $request, XMLScriptletResponse? $response, Context? $context) {
    $year= null;
    sscanf($request.getQueryString(), '%4d', $year);

    // Calculate year from newest item
    if (null === $year) {
      $newest= $this.getIndexPage(0);
      sscanf(key($newest['entries']), '%4d', $year);
    }

    // Add paging information
    $years= $this.getIndexYears();
    $response.addFormResult(new Node('years', null, [ current : $year, min : min($years), max : max($years) ]));

    // Add index by years
    $index= $this.getIndexYear($year);
    $node= $response.addFormResult(new Node('entries'));
    foreach ($month, $entries in $index as [:string[]]?) {
      $m= $node.addChild(new Node('month', null, [ num : $month, year : $year ]));
      foreach ($name in $entries) {
        $entry= $this.getEntryFor($name);
        if (!isset(self::$nodeHandlers[$entry.getClassName()])) {
          throw new FormatException('Index contains unknown element "' ~ $entry.getClassName() ~ '"');
        }

        $child= $m.addChild(self::$nodeHandlers[$entry.getClassName()].nodeFor($entry, self::$nodeHandlers));
        $child.setAttribute('type', $entry.getClassName());
      }
    }
  }
}
