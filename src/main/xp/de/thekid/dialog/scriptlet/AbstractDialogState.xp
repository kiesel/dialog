/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.dialog.scriptlet;

import io.File;
import io.FileUtil;
import util.log.Logger;
import xml.Node;
import scriptlet.xml.XMLScriptletRequest;
import scriptlet.xml.XMLScriptletResponse;
import scriptlet.xml.workflow.Context;
import de.thekid.dialog.IEntry;
import de.thekid.dialog.Album;
import de.thekid.dialog.EntryCollection;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.SingleShot;
import de.thekid.dialog.Update;
import de.thekid.dialog.Topic;

import native standard.unserialize;
import native standard.sprintf;

/**
 * Abstract base class for all dialog state classes
 *
 */
public class AbstractDialogState extends scriptlet.xml.workflow.AbstractState {
  protected string $dataLocation = '';

  /**
   * Returns index for a given page
   *
   * @param   i page number
   */
  public var getIndexPage(int? $i= 0) {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ 'page_' ~ $i ~ '.idx')));
  }

  /**
   * Returns index for a given year
   *
   * @param   y year
   * @return  A map with the years as keys and an array of strings pointing to entry names as values
   */
  public var getIndexYear(int? $y) {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ 'bydate_' ~ $y ~ '.idx')));
  }

  /**
   * Returns topics
   *
   * @param   i page number
   */
  public var getIndexTopics(int? $i= 0) {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ 'topics_' ~ $i ~ '.idx')));
  }

  /**
   * Returns index for all years
   *
   * @return  int[]
   */
  public var getIndexYears() {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ 'bydate.idx')));
  }

  /**
   * Retrieves which page a given element is on
   *
   */
  public int getDisplayPageFor(string? $name) {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ $name ~ '.idx')));
  }

  /**
   * Helper method
   *
   * @param   name
   * @param   expect expected type
   * @throws  IllegalArgumentException if found entry is not of expected type
   */
  protected inline IEntry _getEntryFor(string? $name, XPClass? $expect) throws IllegalArgumentException {
    $entry= unserialize(FileUtil::getContents(new File($this.dataLocation ~ $name ~ '.dat')));

    // Check expectancy
    if (!$expect.isInstance($entry)) throw new IllegalArgumentException(sprintf(
      'Entry of type %s found, %s expected',
      xp::typeOf($entry),
      $expect.getName() 
    ));

    return $entry;
  }

  /**
   * Returns entry for a specified name
   *
   */
  public IEntry getEntryFor(string? $name) {
    return $this._getEntryFor($name, IEntry::class);
  }

  /**
   * Returns album for a specified name
   *
   */
  public Album getAlbumFor(string? $name) {
    return $this._getEntryFor($name, Album::class);
  }

  /**
   * Set up this state
   *
   * @param   scriptlet.xml.workflow.WorkflowScriptletRequest request
   * @param   scriptlet.xml.XMLScriptletResponse response
   * @param   scriptlet.xml.Context context
   */
  public void setup(XMLScriptletRequest? $request, XMLScriptletResponse? $response, Context? $context) {
    parent::setup($request, $response, $context);

    // Read configuration and add relevant sections to formresult
    with ($prop= util.PropertyManager::getInstance().getProperties($request.getProduct())) {
      $this.dataLocation= $prop.readString(
        'data',
        'location',
        $request.getEnvValue('DOCUMENT_ROOT') ~ '/../data/'
      );

      $response.addFormresult(Node::fromArray($prop.readSection('general'), 'config'));
      $links= $response.addFormresult(new Node('links'));
      foreach ($name, $url in $prop.readSection('links')) {
        $links.addChild(new Node('link', null, [ id : $name, href : $url]));
      }
    }

    Logger::getInstance().getCategory().debug('Processing', $request);
  }  
}
