/* This class is part of the XP framework
 *
 * $Id$
 */

package de.thekid.dialog;

import util.Date;

import native standard.sprintf;
import native standard.str_replace;

/**
 * Represents an image strip
 *
 * @test     xp://de.thekid.dialog.unittest.ImageStripTest
 * @see      xp://de.thekid.dialog.Album
 */
public class ImageStrip implements IEntry {
  public string $name           = '';
  public string $title          = '';
  public Date $createdAt        = null;
  public string $description    = '';
  public AlbumImage[] $images   = [];

  /**
   * Constructor
   *
   */
  public __construct(string $name= null) {
    $this.name= $name;
  }

  /**
   * Set name
   *
   */
  public void setName(string $name) {
    $this.name= $name;
  }

  /**
   * Set name
   *
   */
  public self withName(string $name) {
    $this.name= $name;
    return $this;
  }

  /**
   * Get name
   *
   */
  public string getName() {
    return $this.name;
  }

  /**
   * Set title
   *
   */
  public void setTitle(string $title) {
    $this.title= $title;
  }

  /**
   * Set title
   *
   */
  public self withTitle(string $title) {
    $this.title= $title;
    return $this;
  }

  /**
   * Get title
   *
   */
  public string getTitle() {
    return $this.title;
  }

  /**
   * Set createdAt
   *
   */
  public void setCreatedAt(Date $createdAt) {
    $this.createdAt= $createdAt;
  }

  /**
   * Set createdAt
   *
   */
  public self withCreatedAt(Date $createdAt) {
    $this.createdAt= $createdAt;
    return $this;
  }

  /**
   * Get createdAt
   *
   */
  public Date getCreatedAt() {
    return $this.createdAt;
  }

  /**
   * Get date
   *
   * @see     xp://de.thekid.dialog.IEntry
   */
  public Date getDate() {
    return $this.createdAt;
  }

  /**
   * Set description
   *
   */
  public void setDescription(string $description) {
    $this.description= $description;
  }

  /**
   * Set description
   *
   */
  public self withDescription(string $description) {
    $this.description= $description;
    return $this;
  }

  /**
   * Get description
   *
   */
  public string getDescription() {
    return $this.description;
  }

  /**
   * Add an element to images
   *
   * @return  the added entry
   */
  public AlbumImage addImage(AlbumImage $image) {
    $this.images[]= $image;
    return $image;
  }

  /**
   * Add an element to images and return this image strip
   *
   */
  public self withImage(AlbumImage $image) {
    $this.images[]= $image;
    return $this;
  }
  
  /**
   * Get one image element by position. Returns NULL if the element 
   * can not be found.
   *
   */
  public AlbumImage imageAt(int $i) {
    if (!isset($this.images[$i])) return null;
    return $this.images[$i];
  }

  /**
   * Get number of images
   *
   * @return  int
   */
  public int numImages() {
    return $this.images.length;
  }

  /**
   * Find an image
   *
   */
  public var imageUrn(string $name) {
    foreach ($id, $image in $this.images) {
      if ($image.name === $name) return ['id' : $id];
    }
    return null;
  }

  /**
   * Retrieve a string representation
   *
   * @return  string
   */
  public string toString() {
    $is= '';
    foreach ($id, $image in $this.images) {
      $is~= '    ' ~ str_replace("\n", "\n  ", $this.images[$id].toString()) ~ "\n";
    }
    return sprintf("%s(%s) {\n%s  }", $this.getClassName(), $this.name, $is);
  }
}
