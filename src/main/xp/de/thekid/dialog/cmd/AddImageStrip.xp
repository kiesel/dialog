/* This file is part of the XP framework
 *
 * $Id$
 */

package de.thekid.dialog.cmd;

import io.Folder;
import io.File;
import io.FileUtil;
import io.FileNotFoundException;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.AnyOfFilter;
import io.collections.iterate.ExtensionEqualsFilter;
import util.Date;

import de.thekid.dialog.GroupingStrategy;
import de.thekid.dialog.IEntry;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.AlbumImage;

import native standard.dirname;
import native standard.serialize;
import native standard.unserialize;
import native standard.sprintf;
import native standard.usort;
import native standard.is_file;
import native standard.is_dir;
import native standard.file_get_contents;
import native core.create_function;

/**
 * Adds image strips to dialog. Will import a complete directory of (original) 
 * images and assumes the following directory layout:
 * <pre>
 *   + [directory]
 *   |-- description.txt
 *   |-- image #1
 *   |-- image #2
 *   |-- ...
 * </pre>
 * 
 * It will then follow these rules:
 * 
 * <ul>
 *   <li>The images from the directory (file mask: *.JPG) will be taken
 *     for the images in this image strip. They will be resized to
 *     150 x 113 pixels for the overview and to 800 x 600 or 600 x 800
 *     pixels (depending on the picture's orientation) for the larger
 *     view.
 *
 *   </li><li>The entire text from the file description.txt will be used to
 *     make the text for the front page.
 *
 *   </li><li>The directory's name will be used for the image strips'
 *     title.Note: This can be overridden by the command line switch "-t"
 *
 *   </li><li>The oldest image's date will be used for the image strip's 
 *     creation timestamp.
 *     Note: This can be overridden by the command line switch "-c"
 *
 *   </li><li>The directory's name will be transformed to the image strip's online
 *     name by lowercasing all characters in it and replacing any 
 *     character besides a-z, 0-9 and - by an underscore. Double 
 *     underscores will be replaced by single ones.
 *    
 *     Example: 
 *     "Steve's birthday 02/28/2005" will become "steves_birthday_02_28_2005"
 * 
 *     The online name is used in permalinks.
 *   </li>
 * </ul>
 *
 */
public class AddImageStrip extends ImportCommand {
  protected Folder $origin;
  protected Folder $destination;
  protected Folder $imageStripStorage;
  protected Date $createdAt;
  protected string $title;

  /**
   * Set origin folder
   *
   * @param   string folder
   */
  [@arg(position= 0)]
  public void setOrigin(string $folder) {
    $this.origin= new Folder($folder);
    if (!$this.origin.exists()) {
      throw new FileNotFoundException('Folder "' ~ $folder ~ '" does not exist');
    }
  }

  /**
   * Set image strip's title. If no title is given and the image strip did not 
   * previously exist, uses the origin folder's directory name.
   *
   * @param   string title default null
   */
  [@arg]
  public void setTitle(string $title= null) {
    $this.title= $title;
  }

  /**
   * Set image strip's creation date. If no date is given and the image strip did not 
   * previously exist, uses the origin folder's creation date.
   *
   * @param   string date default null
   */
  [@arg]
  public void setCreatedAt(string $date= null) {
    $this.createdAt= $date ? new Date($date) : null;
  }

  /**
   * Import
   *
   */
  protected void doImport() {
    $jpegs= new AnyOfFilter([
      new ExtensionEqualsFilter('.jpg'),
      new ExtensionEqualsFilter('.JPG')
    ]);
    $this.topics= [:];

    // Normalize name
    $imageStripName= $this.normalizeName($this.origin.dirname);
    $this.out.writeLine('===> Adding image strip "', $imageStripName, '" from ', $this.origin);

    // Create destination folder if not already existant
    $this.destination= new Folder($this.imageFolder.getURI() ~ $imageStripName);
    $this.processor.setOutputFolder($this.destination);

    // Check if the image strip already exists
    $this.imageStripStorage= new File($this.dataFolder, $imageStripName ~ '.dat');
    if ($this.imageStripStorage.exists()) {
      $this.out.writeLine('--> Found existing image strip');
      $imageStrip= unserialize(FileUtil::getContents($this.imageStripStorage)) as ImageStrip;

      // Entries will be regenated from scratch    
      $imageStrip.images= new AlbumImage[] {};
    } else {
      $this.out.writeLine('--> Creating new image strip');
      $imageStrip= new ImageStrip();
      $imageStrip.setName($imageStripName);
    }

    // If not specified: Read the title from title.txt if existant, use the 
    // directory name otherwise
    if (null !== $this.title) {
      $imageStrip.setTitle($this.title);
    } else if (!$imageStrip.getTitle()) {
      if (is_file($tf= $this.origin.getURI() ~ 'title.txt')) {
        $imageStrip.setTitle(file_get_contents($tf));
      } else {
        $imageStrip.setTitle($this.origin.dirname);
      }
    }
    $this.out.writeLine('--> Title "', $imageStrip.getTitle(), '"');

    // Read the introductory text from description.txt if existant
    if (is_file($df= $this.origin.getURI() ~ 'description.txt')) {
      $imageStrip.setDescription(file_get_contents($df));
    }

    // Create destination directory if not existant
    $this.destination.exists() || $this.destination.create(0755);

    // Process all images
    for (
      $images= new AlbumImage[] {},
      $it= new FilteredIOCollectionIterator(new FileCollection($this.origin.getURI()), $jpegs);
      $it.hasNext();
    ) {
      $image= $this.processor.albumImageFor($it.next().getURI());
      $this.processMetaData($image, $imageStrip);

      $images[]= $image;
      $this.out.writeLine('     >> Added image ', $image.getName());
    }

    // Sort images by their creation date (from EXIF data)
    usort($images, create_function(
      '$a, $b', 
      'return $b.exifData.dateTime.compareTo($a.exifData.dateTime);'
    ));

    // Add images
    for ($i= 0, $s= $images.length; $i < $s; $i++) {
      $imageStrip.addImage($images[$i]);

      if ($images[$i].exifData.dateTime && !$this.createdAt) {
        $this.out.writeLine('--> Inferring image strip creation date from ', $images[$i]);
        $this.createdAt= $images[$i].exifData.dateTime;
      }
    }

    $imageStrip.setCreatedAt($this.createdAt);
    $this.out.writeLine('--> Created ', $imageStrip.getCreatedAt());

    // Save image strip and topics
    FileUtil::setContents($this.imageStripStorage, serialize($imageStrip));
  }
}
