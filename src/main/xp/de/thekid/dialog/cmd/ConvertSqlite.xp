package de.thekid.dialog.cmd;

import util.cmd.Command;
import io.File;
import io.FileUtil;
import de.thekid.dialog.IEntry;
import de.thekid.dialog.Album;
import de.thekid.dialog.AlbumChapter;
import de.thekid.dialog.AlbumImage;
import de.thekid.dialog.EntryCollection;
import de.thekid.dialog.SingleShot;
import de.thekid.dialog.ImageStrip;
import de.thekid.dialog.DialogRepository;
import rdbms.sqlite3.SQLite3Connection;

import native standard.unserialize;
import native standard.sprintf;

public class ConvertSqlite extends Command {
  private string $dataLocation;
  private SQLite3Connection $conn;

  private int $progress = 0;

  [@arg(name= 'data')]
  public void setDataLocation(string $data= 'data/') {
    $this.dataLocation= $data;
  }

  public void run() {
    $this.out.writeLine('===> Converting dialog installation to sqlite ...');
    $this.conn= new SQLite3Connection(new rdbms.DSN('sqlite3://./' ~ $this.dataLocation ~ 'dialog.sqlite3?autoconnect=1'));
    $this.conn.connect();
    $this.createSchema();

    $i= 0;
    while (true) {
      try {
        $page= $this.getPage($i++);
      } catch (io.IOException $e) {
        break;
      }

      $this.out.writeLine('---> Importing page ' ~ $i);
      $this.importPage($page);
    }
  }

  private void createSchema() {
    $this.conn.query('create table indextype (
      type_id integer primary key,
      desc text
    )');
    $this.conn.query('create table masterindex (
      index_id integer primary key autoincrement,
      type_id integer not null,
      parent_id integer null,

      foreign key (type_id) references indextype(type_id),
      foreign key (parent_id) references masterindex(index_id)
    )');

    $this.conn.query('create table album (
      album_id integer primary key,
      name text,
      title text,
      description text,
      created_at integer
    )');

    $this.conn.query('create table album_chapter (
      chapter_id integer primary key autoincrement,
      album_id integer,
      name text not null,

      foreign key (album_id) references album(album_id)
    )');
    $this.conn.query('create index i1 on album_chapter(album_id)');

    $this.conn.query('create table image (
      image_id integer primary key autoincrement,
      name text not null,
      width integer,
      height integer,
      exifData text,
      iptcData text      
    )');

    $this.conn.query('create table chapter_image (
      chapter_id integer,
      image_id integer,
      seq integer,
      highlight integer,

      foreign key (chapter_id) references album_chapter(chapter_id),
      foreign key (image_id) references image(image_id)
    )');
    $this.conn.query('create index i2 on chapter_image(chapter_id)');
    $this.conn.query('create index i3 on chapter_image(highlight)');

    $this.conn.query('create table singleshot (
      singleshot_id integer primary key,
      name text,
      filename text,
      title text,
      description text,
      created_at integer,
      image_id integer,

      foreign key (image_id) references image(image_id)
    )');

    $this.conn.query('create table collection (
      collection_id integer primary key,
      name text,
      title text,
      description text,
      created_at integer
    )');

    $this.conn.insert('into indextype values (1, "Album")');
    $this.conn.insert('into indextype values (2, "Singleshot")');
    $this.conn.insert('into indextype values (3, "Collection")');

    $this.repo= new DialogRepository($this.conn);
  }

  private var getPage(int $i) {
    return unserialize(FileUtil::getContents(new File($this.dataLocation ~ 'page_' ~ $i ~ '.idx')));
  }

  private void importPage(var $page) {
    foreach ($name in $page['entries'] as string[]?) {
      $this.importEntry($this.getEntryFor($name));
    }

    $this.out.writeLine();
  }

  private void importEntry(IEntry $entry, int $parent_id= null) {
    try {
      $method= $this.getClass().getMethod(sprintf('import%s', $entry.getClass().getSimpleName()));
    } catch (lang.ElementNotFoundException $e) {
      $this.err.writeLine('!--> Skipping import of type ' ~ $entry.getClassName());
      return;
    }

    try {
      $method.invoke($this, [$entry, $parent_id]);
    } catch (lang.reflect.TargetInvocationException $e) {
      throw $e.getCause();
    }
  }

  public void importAlbum(Album $album, int $parent_id= null) {
    $this.out.writeLine('---> Importing album ' ~ $album.getTitle());
    if ($parent_id == null) return;
    $this.repo.createAlbum($album, $parent_id);

    foreach ($chapter in $album.chapters as AlbumChapter[]) {
      $this.importAlbumChapter($album, $chapter);
    }
  }

  public void importAlbumChapter(Album $album, AlbumChapter $chapter) {
    $this.out.writeLine(' --> Processing chapter ' ~ $chapter.getName());
    $this.repo.createChapter($album, $chapter);

    $seq= 0;
    foreach ($image in $chapter.images as AlbumImage[]) {
      $this.showProgress();
      $this.repo.createAlbumImage($chapter, $image, $seq++, false);
    }
    $this.showEndProgress();
  }

  public void importSingleShot(SingleShot $singleshot, int $parent_id= null) {
    $this.out.writeLine('---> Importing singleshot ' ~ $singleshot.getTitle());
    $this.repo.createSingleShot($singleshot, $parent_id);
  }

  public void importEntryCollection(EntryCollection $collection, int $parent_id= null) {
    $this.out.writeLine('---> Importing collection ' ~ $collection.getTitle());
    $this.repo.createCollection($collection, $parent_id);

    foreach ($entry in $collection.entries as IEntry[]) {
      $this.importEntry($entry, $collection.getId());
    }
  }

  /**
   * Returns entry for a specified name
   *
   */
  public IEntry getEntryFor(string? $name) {
    return $this._getEntryFor($name, IEntry::class);
  }

  /**
   * Helper method
   *
   * @param   name
   * @param   expect expected type
   * @throws  IllegalArgumentException if found entry is not of expected type
   */
  protected inline IEntry _getEntryFor(string? $name, XPClass? $expect) throws IllegalArgumentException {
    $entry= unserialize(FileUtil::getContents(new File($this.dataLocation ~ $name ~ '.dat')));

    // Check expectancy
    if (!$expect.isInstance($entry)) throw new IllegalArgumentException(sprintf(
      'Entry of type %s found, %s expected',
      xp::typeOf($entry),
      $expect.getName() 
    ));

    return $entry;
  }

  private void showProgress() {
    if ($this.progress == 0) { 
      $this.out.write('     ');
    }

    $this.out.write('.');

    $this.progress++;

    if ($this.progress > 80) {
      $this.out.writeLine();
      $this.progress= 0;
    }
  }

  private void showEndProgress() {
    if (0 != $this.progress) {
      $this.out.writeLine();
    }
    $this.progress= 0;
  }
}