/* This file is part of the XP framework
 *
 * $Id$
 */

package de.thekid.dialog.cmd;

import de.thekid.dialog.GroupingStrategy;
import de.thekid.dialog.Album;
import de.thekid.dialog.AlbumChapter;

import native standard.sprintf;
import native standard.unserialize;
import native standard.is_file;
import native standard.file_get_contents;
import native standard.usort;
import native core.create_function;
import native standard.sizeof;
import native standard.serialize;


/**
 * Adds albums to dialog. Will import a complete directory of (original) 
 * images and assumes the following directory layout:
 * <pre>
 *   + [directory]
 *   |--+ [highlights]
 *   |  |-- image #1
 *   |  |-- image #2
 *   |  |-- ...
 *   |
 *   |-- description.txt
 *   |-- image #1
 *   |-- image #2
 *   |-- ...
 * </pre>
 * 
 * It will then follow these rules:
 * 
 * <ul>
 *   <li>The images from the "highlights" subdirectory will be taken for
 *     the images on the front page. They will be rescaled to 150 x 113
 *     pixels for this purpose.
 *   
 *     If no such directory exists, the script will pick at most 5 images
 *     from the entire directory's contents per random.
 *
 *   </li><li>The entire text from the file description.txt will be used to
 *     make the text for the front page.
 *
 *   </li><li>The directory's name will be used for the album's title.
 *     Note: This can be overridden by the command line switch "-t"
 *
 *   </li><li>The directory's creation date will be used for the album's 
 *     creation timestamp.
 *     Note: This can be overridden by the command line switch "-c"
 *
 *   </li><li>The images from the directory (file mask: *.JPG) will be taken
 *     for the images on the subsequent pages. They will be resized to
 *     150 x 113 pixels for the overview and to 800 x 600 or 600 x 800
 *     pixels (depending on the picture's orientation) for the larger
 *     view.
 *
 *   </li><li>The images are grouped into chapters. The default setting
 *     is to create a chapter for every hour and can be overriddent by
 *     the command line switch "-g".
 *
 *   </li><li>The directory's name will be transformed to the album's online
 *     name by lowercasing all characters in it and replacing any 
 *     character besides a-z, 0-9 and - by an underscore. Double 
 *     underscores will be replaced by single ones.
 *    
 *     Example: 
 *     "Steve's birthday 02/28/2005" will become "steves_birthday_02_28_2005"
 * 
 *     The online name is used in permalinks.
 *   </li>
 * </ul>
 *
 * @purpose  Command
 */
public class AddAlbum extends ImportCommand {
  const int HIGHLIGHTS_MAX = 5;
  protected io.Folder $origin= null;
  protected io.Folder $destination= null;
  protected io.File $albumStorage= null;
  protected GroupingStrategy $groupingStrategy= null;
  protected Album $album= null;
  protected string $title= null;
  protected util.Date $createdAt= null;

  /**
   * Set origin folder
   *
   * @param   string folder
   */
  [@arg(position= 0)]
  public void setOrigin(string $folder) {
    $this.origin= new io.Folder($folder);
    if (!$this.origin.exists()) {
      throw new io.FileNotFoundException('Folder "' ~ $folder ~ '" does not exist');
    }
  }
  
  /**
   * Set album's title. If no title is given and the album did not 
   * previously exist, uses the origin folder's directory name.
   *
   * @param   string title default NULL
   */
  [@arg]
  public void setTitle(string $title= null) {
    $this.title= $title;
  }

  /**
   * Set album's creation date. If no date is given and the album did not 
   * previously exist, uses the origin folder's creation date.
   *
   * @param   string date default NULL
   */
  [@arg]
  public void setCreatedAt(string $date= null) {
    $this.createdAt= $date ? new util.Date($date) : null;
  }
  
  /**
   * Sets how to group images into chapters (one of "hour" or "day")
   *
   * @see     xp://de.thekid.dialog.GroupingStrategy
   * @param   string method default "hour"
   */
  [@arg]
  public void setGroupBy(string $method= 'hour') {
    try {
      $this.groupingStrategy= lang.Enum::valueOf(lang.XPClass::forName('de.thekid.dialog.GroupingStrategy'), $method);
    } catch (lang.IllegalArgumentException $e) {
      throw new lang.IllegalArgumentException(sprintf(
        'Unknown grouping method "%s", supported: %s',
        $method,
        xp::stringOf(GroupingStrategy::values())
      ));
    }
    $this.out.writeLine('---> Group by ', $this.groupingStrategy);
  }
      
  /**
   * Import
   *
   */
  protected void doImport() {
    $jpegs= new io.collections.iterate.AnyOfFilter([
      new io.collections.iterate.ExtensionEqualsFilter('.jpg'),
      new io.collections.iterate.ExtensionEqualsFilter('.JPG')
    ]);
    $this.topics= [];
    
    // Normalize name
    $albumName= $this.normalizeName($this.origin.dirname);
    $this.out.writeLine('===> Adding album "', $albumName, '" from ', $this.origin);
    
    // Create destination folder if not already existant
    $this.destination= new io.Folder($this.imageFolder.getURI() ~ $albumName);
    $this.processor.setOutputFolder($this.destination);
    
    // Check if the album already exists
    $this.albumStorage= new io.File($this.dataFolder, $albumName ~ '.dat');
    if ($this.albumStorage.exists()) {
      $this.out.writeLine('---> Found existing album');
      $this.album= unserialize(io.FileUtil::getContents($this.albumStorage));

      // Entries will be regenated from scratch    
      $this.album.highlights= $this.album.chapters= [];
    } else {
      $this.out.writeLine('---> Creating new album');
      $this.album= new Album();
      $this.album.setName($albumName);
    }
    
    // If not specified: Read the title from title.txt if existant, use the 
    // directory name otherwise
    if (null !== $this.title) {
      $this.album.setTitle($this.title);
    } else {

      if (is_file($tf= $this.origin.getURI() ~ 'title.txt')) {
        $this.album.setTitle(file_get_contents($tf));
      } else {
        $this.album.setTitle($this.origin.dirname);
      }
    }
    $this.out.writeLine('---> Title "', $this.album.getTitle(), '"');

    // Read the introductory text from description.txt if existant
    if (is_file($df= $this.origin.getURI() ~ 'description.txt')) {
      $this.album.setDescription(file_get_contents($df));
    }
  
    // Create destination directory if not existant
    $this.destination.exists() || $this.destination.create(0755);
    
    // Get highlights
    $highlights= new io.Folder($this.origin.getURI() ~ 'highlights');
    $needsHighlights= self::HIGHLIGHTS_MAX;
    if ($highlights.exists()) {
      for (
        $it= new io.collections.iterate.FilteredIOCollectionIterator(new io.collections.FileCollection($highlights.getURI()), $jpegs);
        $it.hasNext();
      ) {
        $highlight= $this.processor.albumImageFor($it.next().getURI());
        $this.processMetaData($highlight, $this.album);

        $this.album.addHighlight($highlight);
        $this.out.writeLine('     >> Added highlight ', $highlight.getName());
      }
      $needsHighlights= self::HIGHLIGHTS_MAX - $this.album.numHighlights();
    }
    
    // Process all images
    for (
      $images= [],
      $it= new io.collections.iterate.FilteredIOCollectionIterator(new io.collections.FileCollection($this.origin.getURI()), $jpegs);
      $it.hasNext();
    ) {
      $image= $this.processor.albumImageFor($it.next().getURI());
      $this.processMetaData($image, $this.album);

      $images[]= $image;
      $this.out.writeLine('     >> Added image ', $image.getName());
      
      // Check if more highlights are needed
      if ($needsHighlights <= 0) continue;

      $this.out.writeLine('     >> Need ', $needsHighlights, ' more highlight(s), using above image');
      $this.album.addHighlight($image);
      $needsHighlights--;
    }
    
    // Sort images by their creation date (from EXIF data)
    usort($images, create_function(
      '$a, $b', 
      'return $b->exifData->dateTime->compareTo($a->exifData->dateTime);'
    ));

    // Group images by strategy
    for ($i= 0, $chapter= [], $s= sizeof($images); $i < $s; $i++) {
      $key= $this.groupingStrategy.groupFor($images[$i]);
      if (!isset($chapter[$key])) {
        $chapter[$key]= $this.album.addChapter(new AlbumChapter($key));
      }
      if ($images[$i].exifData.dateTime && !$this.createdAt) {
        $this.out.writeLine('---> Inferring album creation date from ', $images[$i]);
        $this.createdAt= $images[$i].exifData.dateTime;
      }

      $chapter[$key].addImage($images[$i]);
    }

    $this.album.setCreatedAt($this.createdAt);
    $this.out.writeLine('---> Created ', $this.album.getCreatedAt());
    
    // Save album and topics
    io.FileUtil::setContents($this.albumStorage, serialize($this.album));
  }
}

