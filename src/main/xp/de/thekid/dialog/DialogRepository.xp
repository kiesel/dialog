package de.thekid.dialog;

import de.thekid.dialog.Album;
import de.thekid.dialog.AlbumChapter;
import de.thekid.dialog.AlbumImage;

import util.Date;
import webservices.json.JsonDecoder;

import native standard.serialize;

public class DialogRepository {
  private static int $TYPE_ALBUM      = 1;
  private static int $TYPE_SINGLESHOT = 2;
  private static int $TYPE_COLLECTION = 3;

  private rdbms.DBConnection $conn = NULL;
  private JsonDecoder $json = new JsonDecoder();

  public __construct(rdbms.DBConnection $conn) {
    $this.conn= $conn;
  }

  public void beginTransaction() {
    return $this.conn.begin(new rdbms.Transaction($this.getClass().getSimpleName()));
  }

  protected void createOnIndex(int $type, int $parent_id, string $name, Date $date) {
    $this.conn.insert('into masterindex (type_id, parent_id, name, created_at) values (%d, %d, %s, %s)', $type, $parent_id, $name, $date);
    return $this.conn.identity();
  }

  public void createAlbum(Album $album, int $parent_id= null) {
    $album.setId($this.createOnIndex(self::$TYPE_ALBUM, $parent_id, $album.getName(), $album.getDate()));
    $this.conn.insert('into album (
      album_id,
      name,
      title,
      description,
      created_at
      ) values (%d, %s, %s, %s, %s)',
      $album.getId(),
      $album.getName(),
      $album.getTitle(),
      $album.getDescription(),
      $album.getCreatedAt()
    );
  }

  public void createChapter(Album $album, AlbumChapter $chapter) {
    $this.conn.insert('into album_chapter (
      album_id,
      name
      ) values (%d, %s)',
      $album.getId(),
      $chapter.getName()
    );
    $chapter.setId($this.conn.identity());
  }

  public void createAlbumImage(AlbumChapter $chapter, AlbumImage $image, int $seq, bool $highlight) {
    $this.createImage($image);

    $this.conn.insert('into chapter_image (
      chapter_id,
      image_id,
      seq,
      highlight
      ) values (%d, %d, %d, %d)',
      $chapter.getId(),
      $image.getId(),
      $seq,
      $highlight
    );
  }

  public void createImage(AlbumImage $image) {
    $this.conn.insert('into image (
      name,
      width,
      height,
      exifData,
      iptcData
      ) values (%s, %d, %d, %s, %s)',
      $image.getName(),
      $image.getWidth(),
      $image.getHeight(),
      ($image.getExifData() !== null ? $this.json.encode($image.getExifData() as string[]) : null),
      ($image.getIptcData() !== null ? $this.json.encode($image.getIptcData() as string[]) : null)
    );
    $image.setId($this.conn.identity());
  }

  public void createSingleshot(SingleShot $shot, int $parent_id= null) {
    $this.createImage($shot.getImage());

    $shot.setId($this.createOnIndex(self::$TYPE_SINGLESHOT, $parent_id, $shot.getName(), $shot.getDate()));
    $this.conn.insert('into singleshot (
      singleshot_id,
      name,
      filename,
      title,
      description,
      created_at,
      image_id
      ) values (%d, %s, %s, %s, %s, %s, %d)',
      $shot.getId(),
      $shot.getName(),
      $shot.getFilename(),
      $shot.getTitle(),
      $shot.getDescription(),
      $shot.getDate(),
      $shot.getImage().getId()
    );
  }

  public void createCollection(EntryCollection $collection, int $parent_id= null) {
    $collection.setId($this.createOnIndex(self::$TYPE_COLLECTION, $parent_id, $collection.getName(), $collection.getDate()));

    $this.conn.insert('into collection (
      collection_id,
      name, 
      title, 
      description, 
      created_at
      ) values (%d, %s, %s, %s, %s)',
      $collection.getId(),
      $collection.getName(),
      $collection.getTitle(),
      $collection.getDescription(),
      $collection.getCreatedAt()
    );
  }

  public IEntry[] findElementsByPage(int $i) {
    $res= [];

    $q= $this.conn.query('select index_id, type_id, name from masterindex where parent_id is null limit %d, 5', $i);
    while ($record= $q.next()) {
      $res[]= $this.loadElement($record['type_id'], $record['index_id']);
    }

    var_dump($res);
    return $res;
  }

  private IEntry loadElement(int $type, int $id) {
    switch ($type) {
      case self::$TYPE_ALBUM:
        return $this.loadAlbum($id);
        break;

      case self::$TYPE_SINGLESHOT:
      return null;
        return $this.loadSingleShot($id);
        break;

      case self::$TYPE_COLLECTION:
      return null;
        return $this.loadCollection($id);
        break;

      default: throw new lang.MethodNotImplementedException('Unknown type: ' ~ $type);
    }
  }

  public Album loadAlbum(int $id) {
    $e= $this.conn.query('select * from album where album_id= %d', $id).next();

    $album= new Album($e['name'])
      .withId($e['album_id'])
      .withTitle($e['title'])
      .withDescription($e['description'])
      .withCreatedAt(new Date($e['created_at']))
    ;

    foreach ($chapter in $this.loadChapterByAlbum($album.getId())) {
      $album.withChapter($chapter);
    }

    return $album;
  }

  public AlbumChapter[] loadChapterByAlbum(int $id) {
    $c= $this.conn.query('select * from album_chapter where album_id= %d', $id);

    $res= [];
    while ($record= $c.next()) {
      $chapter= new AlbumChapter($record['name'])
        .withId($record['chapter_id'])
      ;

      foreach ($image in $this.loadImagesByChapter($chapter.getId())) {
        $chapter.addImage($image);
      }

      $res[]= $chapter;
    }

    return $res;
  }

  public AlbumImage[] loadImagesByChapter(int $id) {
    $c= $this.conn.query('select i.* from chapter_image ci, image i where ci.chapter_id= %d and ci.image_id= i.image_id', $id);

    $res= [];
    while ($record= $c.next()) {
      $image= new AlbumImage($record['name'])
        .withWidth($record['width'])
        .withHeight($record['height'])
        // .withExifData($this.json.decode($record['exifData'])) // FIXME
        // .withIptcData($this.json.decode($record['iptcData'])) // FIXME
      ;

      $res[]= $image;
    }

    return $res;
  }
}