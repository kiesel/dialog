package de.thekid.dialog;

import de.thekid.dialog.Album;
import de.thekid.dialog.AlbumChapter;
import de.thekid.dialog.AlbumImage;

import util.Date;
import webservices.json.JsonDecoder;

import native standard.serialize;

public class DialogRepository {
  private static int $TYPE_ALBUM      = 1;
  private static int $TYPE_SINGLESHOT = 2;
  private static int $TYPE_COLLECTION = 3;

  private rdbms.DBConnection $conn = NULL;
  private JsonDecoder $json = new JsonDecoder();

  public __construct(rdbms.DBConnection $conn) {
    $this.conn= $conn;
  }

  public void beginTransaction() {
    return $this.conn.begin(new rdbms.Transaction($this.getClass().getSimpleName()));
  }

  protected void createOnIndex(int $type, int $parent_id, string $name, Date $date) {
    $this.conn.insert('into masterindex (type_id, parent_id, name, created_at) values (%d, %d, %s, %s)', $type, $parent_id, $name, $date);
    return $this.conn.identity();
  }

  public void createAlbum(Album $album, int $parent_id= null) {
    $album.setId($this.createOnIndex(self::$TYPE_ALBUM, $parent_id, $album.getName(), $album.getDate()));
    $this.conn.insert('into album (
      album_id,
      name,
      title,
      description,
      created_at
      ) values (%d, %s, %s, %s, %s)',
      $album.getId(),
      $album.getName(),
      $album.getTitle(),
      $album.getDescription(),
      $album.getCreatedAt()
    );
  }

  public void createChapter(Album $album, AlbumChapter $chapter) {
    $this.conn.insert('into album_chapter (
      album_id,
      name
      ) values (%d, %s)',
      $album.getId(),
      $chapter.getName()
    );
    $chapter.setId($this.conn.identity());
  }

  public void createAlbumImage(AlbumChapter $chapter, AlbumImage $image, int $seq, bool $highlight) {
    $this.createImage($image);

    $this.conn.insert('into chapter_image (
      chapter_id,
      image_id,
      seq,
      highlight
      ) values (%d, %d, %d, %d)',
      $chapter.getId(),
      $image.getId(),
      $seq,
      $highlight
    );
  }

  public void createImage(AlbumImage $image) {
    $this.conn.insert('into image (
      name,
      width,
      height,
      exifData,
      iptcData
      ) values (%s, %d, %d, %s, %s)',
      $image.getName(),
      $image.getWidth(),
      $image.getHeight(),
      ($image.getExifData() !== null ? $this.json.encode($image.getExifData() as string[]) : null),
      ($image.getIptcData() !== null ? $this.json.encode($image.getIptcData() as string[]) : null)
    );
    $image.setId($this.conn.identity());
  }

  public void createSingleshot(SingleShot $shot, int $parent_id= null) {
    $this.createImage($shot.getImage());

    $shot.setId($this.createOnIndex(self::$TYPE_SINGLESHOT, $parent_id, $shot.getName(), $shot.getDate()));
    $this.conn.insert('into singleshot (
      singleshot_id,
      name,
      filename,
      title,
      description,
      created_at,
      image_id
      ) values (%d, %s, %s, %s, %s, %s, %d)',
      $shot.getId(),
      $shot.getName(),
      $shot.getFilename(),
      $shot.getTitle(),
      $shot.getDescription(),
      $shot.getDate(),
      $shot.getImage().getId()
    );
  }

  public void createCollection(EntryCollection $collection, int $parent_id= null) {
    $collection.setId($this.createOnIndex(self::$TYPE_COLLECTION, $parent_id, $collection.getName(), $collection.getDate()));

    $this.conn.insert('into collection (
      collection_id,
      name, 
      title, 
      description, 
      created_at
      ) values (%d, %s, %s, %s, %s)',
      $collection.getId(),
      $collection.getName(),
      $collection.getTitle(),
      $collection.getDescription(),
      $collection.getCreatedAt()
    );
  }
}