/* This class is part of the XP framework
 *
 * $Id$ 
 */

package de.thekid.dialog.io;

import de.thekid.dialog.AlbumImage;
import de.thekid.dialog.io.ProcessorTarget;
import io.File;
import io.Folder;
import img.util.ExifData;
import img.util.IptcData;
import img.util.ImageInfo;
import img.filter.ImageFilter;
import img.Image;
import img.Color;
import img.io.StreamReader;
import img.io.JpegStreamWriter;
import util.log.Traceable;

import native standard.array_reverse;
import native standard.max;
import native standard.min;
import native standard.implode;
import native standard.basename;
import native standard.sizeof;


/**
 * Processes images, creating the "full" and thumbnail versions of
 * specified files and extracting their EXIF and IPTC data.
 *
 */
public class ImageProcessor extends Object implements Traceable {
  public Folder $outputFolder = null;
  public util.log.LogCategory $cat = null;
  public img.filter.ImageFilter[] $filters = [];
  public int $quality= 90;
  public int[] $thumbDimensions= [150, 113];
  public int[] $fullDimensions= [640, 480];

  /**
   * Set outputFolder
   *
   */
  public void setOutputFolder(io.Folder? $outputFolder) {
    $this.outputFolder= $outputFolder;
  }
  
  /**
   * Add a filter. The filters will be applied in the order added on 
   * an image after processing it.
   *
   */
  public ImageFilter addFilter(ImageFilter? $filter) {
    $this.filters[]= $filter;
    return $filter;
  }

  /**
   * Get outputFolder
   *
   */
  public io.Folder getOutputFolder() {
    return $this.outputFolder;
  }
  
  /**
   * Set quality (defaults to 90)
   *
   * @param   quality A quality value in percent
   */
  public void setQuality(int $quality) {
    $this.quality= $quality;
  }

  /**
   * Get quality
   *
   */
  public int getQuality() {
    return $this.quality;
  }
  
  /**
   * Resample a given image to given dimensions.
   *
   * @param   dimensions (0 = X, 1 = Y)
   */
  public img.Image resampleTo(Image? $origin, bool $horizontal, int[]? $dimensions) {
  
    // Check whether the picture is landscape or portrait
    if ($origin.getWidth() < $origin.getHeight()) {
    
      // This is portrait, so flip dimensions to reflect that
      $dimensions= array_reverse($dimensions) as int[];
    }
  
    // Find out the maximum divider required, it is used
    // for both dimensions to keep aspect ratio.
    $div= max(
      $origin.getWidth()  / $dimensions[0],
      $origin.getHeight() / $dimensions[1]
    );
    
    $d= new int[] {
      $origin.getWidth()  / $div,
      $origin.getHeight() / $div
    };
  
    $this.cat && $this.cat.infof(
      'Resampling %s image to %d x %d', 
      $horizontal ? 'horizontal' : 'vertical',
      $d[0],
      $d[1]
    );
    $resized= Image::create($d[0], $d[1], IMG_TRUECOLOR);
    $resized.resampleFrom($origin);
    return $resized;
  }
 
  /**
   * Resample a given image to given dimensions. Will always fit the 
   * image into the given dimensions, adding a border with the specified
   * color if necessary.
   *
   * @param   dimensions (0 = X, 1 = Y)
   */
  public Image resampleToFixed(Image? $origin, int[]? $dimensions, img.Color? $color) {
    $this.cat && $this.cat.debug('Resampling image to fixed', implode('x', $dimensions));
    $resized= Image::create($dimensions[0], $dimensions[1], IMG_TRUECOLOR);
    
    $this.cat && $this.cat.debug('Original dimensions: ', implode('x', $origin.getDimensions()));
    
    $fx= $origin.getWidth() / $resized.getWidth();
    $fy= $origin.getHeight() / $resized.getHeight();
    $factor= min($fx, $fy);
    $this.cat && $this.cat.debug('fx=', $fx, 'fy=', $fy, '=> factor=', $factor);
    
    // Calculate size of source area
    $tx= $resized.getWidth() * $factor;
    $ty= $resized.getHeight() * $factor;
    
    $this.cat && $this.cat.debug('Using crop from original of', $tx ~ 'x' ~ $ty);

    // Calculate offset. In ideal case, this is zero for both dimensions. If
    // one dimensions does not exactly fit, center the view over the middle
    // of the source axis.
    $offsetx= ($origin.getWidth() - $tx) / 2;
    $offsety= ($origin.getHeight() - $ty) / 2;
    
    $this.cat && $this.cat.debug('offsetx=', $offsetx, 'offsety=', $offsety);
    
    $resized.resampleFrom(
      $origin,
      0,
      0,
      $offsetx,
      $offsety,
      $resized.getWidth(),   // Image size
      $resized.getHeight(),   // Image size
      $origin.getWidth() - ($offsetx * 2),
      $origin.getHeight() - ($offsety * 2)
    );
    return $resized;
  }
 
  /**
   * Helper method to create thumbnail from origin image.
   *
   */
  public Image thumbImageFor(Image? $origin, img.util.ExifData? $exifData) {
    return $this.resampleToFixed($origin, $this.thumbDimensions, new Color('#ffffff'));
  }

  /**
   * Helper method to create "full" image from origin image.
   *
   */
  public Image fullImageFor(Image? $origin, img.util.ExifData? $exifData) {
    return $this.resampleTo($origin, $exifData.isHorizontal(), $this.fullDimensions);
  }
  
  /**
   * Retrieve a list of targets to be transformed
   *
   */
  public ProcessorTarget[] targetsFor(io.File? $in) {
    return [
      new ProcessorTarget('thumbImageFor', 'thumb.' ~ $in.getFilename(), false, false),
      new ProcessorTarget('fullImageFor', $in.getFilename(), true, true)
    ];
  }
        
  /**
   * Returns an album image for a given filename
   *
   * @throws  img.ImagingException in case of an error
   */
  public AlbumImage albumImageFor(string $filename) throws img.ImagingException {
    with ($image= new AlbumImage(basename($filename))) {
      $in= new File($filename);

      // Read the image's meta data
      $this.cat && $this.cat.debug('Extracting EXIF metadata from', $filename);        
      try {
        $image.setExifData(ExifData::fromFile($in));
      } catch (XPException $e) {
        $this.cat && $this.cat.error($e);
        throw $e;
      }

      $this.cat && $this.cat.debug('Extracting IPTC metadata from', $filename);        
      try {
        $image.setIptcData(IptcData::fromFile($in, null));
      } catch (FormatException $e) {
        // Ignore, if cannot be read...
      } catch (XPException $e) {
        $this.cat && $this.cat.error($e);
        throw $e;
      }

      // Go over targets
      $origin= null;
      $dimensionsSet= false;
      foreach ($target in $this.targetsFor($in)) {
        $destination= new File($this.outputFolder.getURI() ~ $target.getDestination());
        if ($destination.exists() && !($destination.lastModified() < $in.lastModified())) {
          $this.cat && $this.cat.debugf(
            'Target method %s has been processed before, skipping...',
            $target.getMethod()
          );
          if ($target.getInferDimensions()) {
            $info= ImageInfo::fromFile($destination);
            $image.setWidth($info.getWidth());
            $image.setHeight($info.getHeight());
          }
          continue;
        }
        
        // If we haven't done so before, load origin image
        if (!isset($origin)) {
          $this.cat && $this.cat.debug('Loading', $filename);        
          try {
            $origin= Image::loadFrom(new StreamReader($in));
          } catch (img.ImagingException $e) {
            $this.cat && $this.cat.error($e);
            throw $e;
          }
        }
        
        // Transform
        $transformed= $this.getClass().getMethod($target.getMethod()).invoke($this, [$origin, $image.exifData]) as Image;
        
        // Infer dimensions
        if ($target.getInferDimensions()) {
          $image.setWidth($transformed.getWidth());
          $image.setHeight($transformed.getHeight());
          $dimensionsSet= true;
        }
        
        // Apply post-transform filters if specified by the target
        if ($target.getApplyFilters()) {
          for ($i= 0, $s= sizeof($this.filters); $i < $s; $i++) {
            $this.cat && $this.cat.debugf(
              'Applying filter %d of %d (%s)', 
              $i, 
              $s, 
              $this.filters[$i].toString()
            );
            $transformed.apply($this.filters[$i]);
          }
        }
        
        // Save
        $this.cat && $this.cat.debug('Saving to', $destination.getURI());
        try {
          $transformed.saveTo(new JpegStreamWriter($destination, $this.quality));
        } catch (img.ImagingException $e) {
          $this.cat && $this.cat.error($e);
          delete($transformed);
          delete($origin);
          throw $e;
        }

        delete($transformed);
      }
      
      // Clean up
      delete($origin);
    }
    
    return $image;
  }
  
  /**
   * Set a trace for debugging
   *
   */
  public void setTrace(util.log.LogCategory? $cat) {
    $this.cat= $cat;
  }
}
