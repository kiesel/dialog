package de.thekid.dialog.sync;

import util.cmd.Console;

import native standard.array_merge;

/**
 * Implements the synchronizer interface by using an external call to
 * the "rsync" utility.
 *
 * @see   http://en.wikipedia.org/wiki/Rsync
 */
public class RsyncImpl extends Syncronizer {
  protected string $target;

  /**
   * Sets target
   *
   */
  public void setTarget(string? $target) {
    $this.target= $target;
  }
  
  /**
   * Creates a string representation
   *
   */
  public string toString() {
    return nameof($this) ~ '(-> ' ~  $this.target ~ ')';
  }

  /**
   * Runs rsync
   *
   */
  public void run() {
    Console::$out.write('[');
    $args= array_merge([ '-e', 'ssh', '--chmod=Da+rx,Fa+r', '--files-from=-', $this.relativePathOf($this.base.getURI()), $this.target ]);
    $command= new Process('rsync', $args, null, null);

    // Pipe all files
    foreach ($file in $this.filesNewerThan($this.lastSync())) {
      $name= $this.relativePathOf($file.getURI());
      $command.in.writeLine($name);
      Console::$out.write('.');
    }
    $command.in.close();
    
    // Read rest
    do {
      Console::$out.write($command.out.read());
    } while (!$command.out.eof());
    Console::$out.writeLine(']');

    // Check exitcode
    $exitCode= $command.close();
    if (0 != $exitCode) {
      throw new lang.reflect.TargetInvocationException('Invoking `' ~ $command.getCommandLine() ~ '` failed w/ exitcode ' ~ $exitCode);
    }
  }
}
